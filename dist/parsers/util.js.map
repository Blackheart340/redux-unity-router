{"version":3,"sources":["../../src/parsers/util.js"],"names":["flattenRoutes","routes","parentRoutePath","parentIdPath","result","route","pattern","undefined","path","id","toString","data","idPath","filter","item","join","Array","isArray","concat","console","warn","JSON","stringify","includes"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAAqD;AAAA,QAA5CC,eAA4C,uEAA1B,EAA0B;AAAA,QAAtBC,YAAsB,uEAAP,EAAO;;;AAE9E,QAAIC,SAAS,EAAb;;AAF8E;AAAA;AAAA;;AAAA;AAI9E,6BAAkBH,MAAlB,8HAA0B;AAAA,gBAAjBI,KAAiB;AAAA,gBAEhBC,OAFgB,GAEJD,KAFI,CAEhBC,OAFgB;;;AAItB,gBAAIA,YAAYC,SAAhB,EAA2B;;AAE3B,gBAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiCA,UAAU,EAAEE,MAAMF,OAAR,EAAV;;AANX,2BAQPA,OARO;AAAA,gBAQhBE,IARgB,YAQhBA,IARgB;;;AAUtBA,mBAAO,gBAASN,eAAT,EAA0BM,IAA1B,CAAP;;AAVsB,4BAYqBH,KAZrB,CAYdI,EAZc;AAAA,gBAYdA,EAZc,6BAYTD,KAAKE,QAAL,EAZS;AAAA,8BAYqBL,KAZrB,CAYQM,IAZR;AAAA,gBAYQA,IAZR,+BAYe,EAZf;;AAatB,gBAAMC,SAAS,CAACT,YAAD,EAAeM,EAAf,EAAmBI,MAAnB,CAA0B;AAAA,uBAAQC,SAAS,EAAjB;AAAA,aAA1B,EAA+CC,IAA/C,qBAAf;;AAEA,gBAAIC,MAAMC,OAAN,CAAcZ,MAAMJ,MAApB,CAAJ,EAAiC;AAC7BG,yBAASA,OAAOc,MAAP,CAAclB,cAAcK,MAAMJ,MAApB,EAA4BO,IAA5B,EAAkCI,MAAlC,CAAd,CAAT;AACH;;AAED,gBAAI,sBAAWO,OAAX,IAAsB,OAAOA,QAAQC,IAAf,KAAwB,UAAlD,EAA8D;AAAE;AAC5D,oBAAIf,MAAMI,EAAN,KAAaF,SAAjB,EAA4B;AACxBY,4BAAQC,IAAR,YAAsBC,KAAKC,SAAL,CAAehB,OAAf,CAAtB,iBADwB,CACoC;AAC/D,iBAFD,MAEO,IAAI,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqBiB,QAArB,SAAqClB,MAAMI,EAA3C,EAAL,EAAqD;AACxDU,4BAAQC,IAAR,YAAsBC,KAAKC,SAAL,CAAehB,OAAf,CAAtB,mDADwD,CACsC;AACjG;AACJ;;AAED,gBAAMQ;AACFL,sBADE;AAEFG,8BAFE;AAGFD;AAHE,eAIC;AACCL,sCACOA,OADP;AAEIE;AAFJ;AADD,aAJD,CAAN;;AAYAJ,qBAASA,OAAOc,MAAP,CAAcJ,IAAd,CAAT;AACH;AA5C6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8C9E,WAAOV,MAAP;AACH,CA/CM","file":"util.js","sourcesContent":["import { join as pathJoin } from 'path';\nimport { __DEV__, ID_DELIM } from '../constants';\n\nexport const flattenRoutes = (routes, parentRoutePath = '', parentIdPath = '') => {\n\n    let result = [];\n\n    for (let route of routes) {\n\n        let { pattern } = route;\n\n        if (pattern === undefined) continue;\n\n        if (typeof pattern === 'string') pattern = { path: pattern };\n\n        let { path } = pattern;\n\n        path = pathJoin(parentRoutePath, path);\n\n        const { id = path.toString(), data = {}} = route;\n        const idPath = [parentIdPath, id].filter(item => item !== '').join(ID_DELIM);\n\n        if (Array.isArray(route.routes)) {\n            result = result.concat(flattenRoutes(route.routes, path, idPath));\n        }\n\n        if (__DEV__ && console && typeof console.warn === 'function') { // eslint-disable-line no-console\n            if (route.id === undefined) {\n                console.warn(`Route ${JSON.stringify(pattern)} has no id`); // eslint-disable-line no-console\n            } else if (!['string', 'number'].includes(typeof route.id)) {\n                console.warn(`Route ${JSON.stringify(pattern)} has id that is not type of string or number`); // eslint-disable-line no-console\n            }\n        }\n\n        const item = {\n            id,\n            idPath,\n            data,\n            ...{\n                pattern: {\n                    ...pattern,\n                    path\n                }\n            }\n        };\n\n        result = result.concat(item);\n    }\n\n    return result;\n};"]}