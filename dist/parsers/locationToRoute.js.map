{"version":3,"sources":["../../src/parsers/locationToRoute.js"],"names":["createParamsFromKeys","match","keys","reduce","result","key","index","name","createMatchPathToRoute","path","split","pathname","shift","pathQuery","parse","matchers","matcher","regexp","query","id","idPath","pattern","data","test","matchQuery","queryItems","Object","queryItemsLength","length","curQueryItem","exec","params","createMatchers","routes","map","route","item","RegExp","createLocationToRouteParser"],"mappings":"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","file":"locationToRoute.js","sourcesContent":["import pathToRegexp from 'path-to-regexp';\nimport qs from 'query-string';\nimport { flattenRoutes } from './util';\n\nconst createParamsFromKeys = (match, keys) => keys.reduce((result, key, index) => {\n    result[key.name] = match[index + 1];\n    return result;\n}, {});\n\nconst createMatchPathToRoute = matchers => path => {\n\n    path = path.split('?');\n    const pathname = path.shift();\n    const pathQuery = qs.parse(path.shift());\n\n    for (let matcher of matchers) {\n        const { regexp, query, id, idPath, pattern, data = {} } = matcher;\n\n        if (regexp.test(pathname)) {\n\n            let matchQuery = true;\n            let queryItems = Object.keys(query);\n            let queryItemsLength = queryItems.length;\n\n            while (matchQuery && queryItemsLength) {\n                const curQueryItem = queryItems[queryItemsLength - 1];\n                matchQuery = query[curQueryItem].test(pathQuery[curQueryItem]);\n                queryItemsLength--;\n            }\n\n            if (matchQuery) {\n                let keys = [];\n                const match = pathToRegexp(pattern.path, keys).exec(pathname);\n                const params = createParamsFromKeys(match, keys);\n                return {\n                    pattern,\n                    id,\n                    idPath,\n                    params,\n                    data\n                };\n            }\n        }\n    }\n    return {};\n};\n\nconst createMatchers = routes => flattenRoutes(routes).map(route => {\n    const regexp = pathToRegexp(route.pattern.path);\n    const id = route.id;\n    const query = Object.keys(route.pattern.query || {}).reduce( (result, item) => {\n        result[item] = new RegExp(route.pattern.query[item]);\n        return result;\n    }, {});\n\n    return {\n        ...route,\n        id,\n        regexp,\n        query\n    };\n});\n\nconst createLocationToRouteParser = routes => {\n    const matchers = createMatchers(routes);\n    return createMatchPathToRoute(matchers);\n};\n\nexport default createLocationToRouteParser;"]}