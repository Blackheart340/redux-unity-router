{"version":3,"sources":["../src/store-enhancer.js"],"names":["actions","createInitialState","state","slice","val","immutable","set","history","locationParser","reducer","initialState","enhancer","undefined","newInitialState","location","store","next","listen","silent","dispatch","locationChange"],"mappings":";;;;;;AAAA;;IAAYA,O;;AACZ;;;;AAEA,IAAMC,qBAAqB,SAArBA,kBAAqB,OAAoC;AAAA,QAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,QAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,QAApBC,GAAoB,QAApBA,GAAoB;AAAA,QAAfC,SAAe,QAAfA,SAAe;;AAC3D,QAAIA,SAAJ,EAAe;AACXH,gBAAQA,MAAMI,GAAN,CAAUH,KAAV,EAAiB,uBAAOC,GAAP,CAAjB,CAAR;AACH,KAFD,MAEO;AACHF,cAAMC,KAAN,IAAeC,GAAf;AACH;AACD,WAAOF,KAAP;AACH,CAPD;;kBASe;AAAA,QAAGK,OAAH,SAAGA,OAAH;AAAA,QAAYJ,KAAZ,SAAYA,KAAZ;AAAA,QAAmBK,cAAnB,SAAmBA,cAAnB;AAAA,QAAmCH,SAAnC,SAAmCA,SAAnC;AAAA,WAAmD;AAAA,eAAQ,UAACI,OAAD,EAAUC,YAAV,EAAwBC,QAAxB,EAAqC;;AAE3G;AACA,gBAAI,OAAOD,YAAP,KAAwB,UAAxB,IAAsC,OAAOC,QAAP,KAAoB,WAA9D,EAA2E;AACvEA,2BAAWD,YAAX;AACAA,+BAAeE,SAAf;AACH;AACD,gBAAIC,kBAAkBH,gBAAgBC,QAAtC;;AAEAE,8BAAkBZ,mBAAmB,EAAEC,OAAOW,eAAT,EAA0BT,KAAKI,eAAeD,QAAQO,QAAvB,CAA/B,EAAiEX,YAAjE,EAAwEE,oBAAxE,EAAnB,CAAlB;;AAEA,gBAAMU,QAAQC,KAAKP,OAAL,EAAcI,eAAd,EAA+BF,QAA/B,CAAd;;AAEAJ,oBAAQU,MAAR,CAAe;AAAA,uBACX,CAACH,SAASI,MAAV,IAAoBH,MAAMI,QAAN,CAAenB,QAAQoB,cAAR,CAAuBN,QAAvB,CAAf,CADT;AAAA,aAAf;;AAIA,mBAAOC,KAAP;AACH,SAlBiE;AAAA,KAAnD;AAAA,C","file":"store-enhancer.js","sourcesContent":["import * as actions from './action-creators';\nimport { fromJS } from 'immutable';\n\nconst createInitialState = ({state, slice, val, immutable}) => {\n    if (immutable) {\n        state = state.set(slice, fromJS(val));\n    } else {\n        state[slice] = val;\n    }\n    return state;\n};\n\nexport default ({ history, slice, locationParser, immutable }) => next => (reducer, initialState, enhancer) => {\n\n    // boilerplate\n    if (typeof initialState === 'function' && typeof enhancer === 'undefined') {\n        enhancer = initialState;\n        initialState = undefined;\n    }\n    let newInitialState = initialState || enhancer;\n\n    newInitialState = createInitialState({ state: newInitialState, val: locationParser(history.location), slice, immutable });\n\n    const store = next(reducer, newInitialState, enhancer);\n\n    history.listen(location => (\n        !location.silent && store.dispatch(actions.locationChange(location))\n    ));\n\n    return store;\n};"]}