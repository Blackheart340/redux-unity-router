{"version":3,"sources":["../src/middleware.js"],"names":["history","routeParser","dispatch","getState","action","type","indexOf","LOCATION_CHANGED","GO_TO_ROUTE","PUSH","payload","REPLACE","includes","sameLocation","location","pathname","search","hash","next"],"mappings":";;;;;;AAAA;;AACA;;kBAEe;AAAA,QAAGA,OAAH,QAAGA,OAAH;AAAA,QAAYC,WAAZ,QAAYA,WAAZ;AAAA,WAA8B;AAAA,YAAGC,QAAH,SAAGA,QAAH;AAAA,YAAaC,QAAb,SAAaA,QAAb;AAAA,eAA4B;AAAA,mBAAQ,kBAAU;;AAEvF,oBAAIC,OAAOC,IAAP,CAAYC,OAAZ,+BAAuC,CAAvC,IAA4CF,OAAOC,IAAP,KAAgB,wBAAaE,gBAA7E,EAA+F;;AAE3F,wBAAIH,OAAOC,IAAP,KAAgB,wBAAaG,WAAjC,EAA8C;AAC1CJ,+BAAOC,IAAP,GAAc,wBAAaI,IAA3B;AACAL,+BAAOM,OAAP,GAAiBT,YAAYG,OAAOM,OAAnB,CAAjB;AACH;;AAED,wBAAI,CAAC,wBAAaD,IAAd,EAAoB,wBAAaE,OAAjC,EAA0CC,QAA1C,CAAmDR,OAAOC,IAA1D,CAAJ,EAAqE;;AAEjED,+BAAOM,OAAP,GAAiB,OAAON,OAAOM,OAAd,KAA0B,QAA1B,GAAqC,wBAAUN,OAAOM,OAAjB,CAArC,GAAiEN,OAAOM,OAAzF;;AAEA,4BAAMG,eAAeb,QAAQc,QAAR,CAAiBC,QAAjB,KAA8BX,OAAOM,OAAP,CAAeK,QAA7C,IACAf,QAAQc,QAAR,CAAiBE,MAAjB,KAA4BZ,OAAOM,OAAP,CAAeM,MAD3C,IAEAhB,QAAQc,QAAR,CAAiBG,IAAjB,KAA0Bb,OAAOM,OAAP,CAAeO,IAF9D;;AAIAb,+BAAOC,IAAP,GAAcQ,eAAe,wBAAaF,OAA5B,GAAsCP,OAAOC,IAA3D;AACH;;AAED,wBAAI,2BAAgBD,OAAOC,IAAvB,CAAJ,EAAkC;AAC9BL,gCAAQ,2BAAgBI,OAAOC,IAAvB,CAAR,EAAsCD,OAAOM,OAA7C;AACH;;AAED;AACH;;AAED,uBAAOQ,KAAKd,MAAL,CAAP,CA3BuF,CA2BlE;AACxB,aA5BwE;AAAA,SAA5B;AAAA,KAA9B;AAAA,C","file":"middleware.js","sourcesContent":["import { ACTION_PREFIX, ACTION_TYPES, HISTORY_METHODS} from './constants';\nimport { parsePath } from 'history';\n\nexport default ({ history, routeParser }) => ({ dispatch, getState }) => next => action => {\n\n    if (action.type.indexOf(ACTION_PREFIX) === 0 && action.type !== ACTION_TYPES.LOCATION_CHANGED) {\n\n        if (action.type === ACTION_TYPES.GO_TO_ROUTE) {\n            action.type = ACTION_TYPES.PUSH;\n            action.payload = routeParser(action.payload);\n        }\n\n        if ([ACTION_TYPES.PUSH, ACTION_TYPES.REPLACE].includes(action.type)) {\n\n            action.payload = typeof action.payload === 'string' ? parsePath(action.payload) : action.payload;\n\n            const sameLocation = history.location.pathname === action.payload.pathname\n                              && history.location.search === action.payload.search\n                              && history.location.hash === action.payload.hash;\n\n            action.type = sameLocation ? ACTION_TYPES.REPLACE : action.type;\n        }\n\n        if (HISTORY_METHODS[action.type]) {\n            history[HISTORY_METHODS[action.type]](action.payload);\n        }\n\n        return;\n    }\n\n    return next(action); // eslint-disable-line consistent-return\n};"]}